generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now()) // Date de cr√©ation
}

model Image {
  id            String  @id @default(cuid())
  url           String
  alt           String
  skillId       String? @unique
  skill         Skill?  @relation("SkillImage", fields: [skillId], references: [id], onDelete: Cascade)
  aboutId       String? @unique
  about         About?  @relation("AboutImage", fields: [aboutId], references: [id], onDelete: Cascade)
  avatarRectoId String? @unique
  avatarRecto   Avatar? @relation("AvatarRectoImage", fields: [avatarRectoId], references: [id], onDelete: Cascade)
  avatarVersoId String? @unique
  avatarVerso   Avatar? @relation("AvatarVersoImage", fields: [avatarVersoId], references: [id], onDelete: Cascade)
}

model Skill {
  id    String @id @default(uuid())
  title String
  image Image? @relation("SkillImage")
}

model TextNotation {
  id           String  @id @default(uuid())
  page         String
  order        Int
  type         String?
  text         String?
  textNotation String?
}

model Section {
  id      String  @id @default(uuid())
  section String  @unique
  title   String
  text    String?
}

model About {
  id    String @id @default(uuid())
  text  String
  order Int
  image Image? @relation("AboutImage")
}

enum ArrowBullPosition {
  topLeft
  topRight
  bottomLeft
  bottomRight
  middleTopLeft
  middleTopRight
  middleBottomLeft
  middleBottomRight
}

model Avatar {
  id                String            @id @default(uuid())
  page              String            @unique
  text              String
  recto             Image?            @relation("AvatarRectoImage")
  verso             Image?            @relation("AvatarVersoImage")
  arrowBullPosition ArrowBullPosition
}
